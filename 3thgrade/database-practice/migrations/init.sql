---------------------------------------------------------------
-- creation tables
---------------------------------------------------------------
;
create table locality_types (
    locality_type_id int generated by default as identity primary key,
    locality_type_name varchar(127) not null
);
create table locality_trip_descriptions (
    locality_trip_description_id int generated by default as identity primary key,
    description text not null,
    count_of_landmarks int,
    count_of_hotels int,
    year_of_foundation int
);
create table localities (
    locality_id int generated by default as identity primary key,
    locality_name varchar(127) not null unique,
    population int not null,
    area float not null,
    locality_type_id int references locality_types(locality_type_id),
    locality_trip_description_id int references locality_trip_descriptions(locality_trip_description_id)
);
create table road_types (
    road_type_id int generated by default as identity primary key,
    road_type_name varchar(127) not null
);
create table roads (
    f_locality_id int references localities(locality_id),
    s_locality_id int references localities(locality_id),
    length int not null,
    road_type_id int references road_types(road_type_id)
);
---------------------------------------------------------------
-- #3
---------------------------------------------------------------
---------------------------------------------------------------
-- indexes
---------------------------------------------------------------
;
CREATE INDEX locality_name_index on localities (locality_name);
CREATE INDEX locality_population_index on localities (population);
CREATE INDEX locality_area_index on localities (area);
CREATE INDEX road_length on roads (length);
---------------------------------------------------------------
---------------------------------------------------------------
-- functions for triggers
---------------------------------------------------------------
;
CREATE FUNCTION before_insert_trigger_function() RETURNS TRIGGER AS $$ BEGIN IF LENGTH(NEW.locality_name) < 3 THEN RAISE EXCEPTION 'Значение в locality_name должно быть больше 2 ';
END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION after_insert_trigger_function() RETURNS TRIGGER AS $$ BEGIN RAISE NOTICE 'Новая запись добавлена: id = %',
NEW.locality_id;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE FUNCTION before_update_trigger_function() RETURNS TRIGGER AS $$ BEGIN IF LENGTH(NEW.locality_name) < 3 THEN RAISE EXCEPTION 'Значение в locality_name должно быть больше 2 ';
END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- triggers
CREATE TRIGGER before_insert_trigger BEFORE
INSERT ON localities FOR EACH ROW EXECUTE FUNCTION before_insert_trigger_function();
CREATE TRIGGER after_insert_trigger
AFTER
INSERT ON localities FOR EACH ROW EXECUTE FUNCTION after_insert_trigger_function();
CREATE TRIGGER before_update_trigger BEFORE
UPDATE ON localities FOR EACH ROW EXECUTE FUNCTION before_update_trigger_function();
---------------------------------------------------------------
---------------------------------------------------------------
-- procedures and functions
---------------------------------------------------------------
;
-- START get_locations_with_roads
;
CREATE FUNCTION get_locations_with_roads() RETURNS TABLE (
    f_locality varchar(127),
    s_locality varchar(127),
    road_length int
) LANGUAGE plpgsql AS $$ BEGIN RETURN QUERY
SELECT l1.locality_name,
    l2.locality_name,
    r.length
FROM localities as l1
    right join roads as r on l1.locality_id = r.f_locality_id
    left join localities as l2 on r.s_locality_id = l2.locality_id;
END;
$$;
-- END get_locations_with_roads
;
-- START get_locality_with_all_roads
;
CREATE FUNCTION get_locality_with_all_roads() RETURNS TABLE (
    locality_id int,
    locality_name varchar(127),
    population int,
    area float,
    locality_type_id int,
    locality_trip_description_id int
) LANGUAGE plpgsql AS $$ BEGIN RETURN QUERY
SELECT *
FROM localities as l1
WHERE l1.locality_id in (
        SELECT f_locality_id
        FROM roads as r
        GROUP BY r.f_locality_id
        HAVING count(r.s_locality_id) = (
                SELECT count(*)
                FROM localities as l2
                WHERE l2.locality_type_id = 1
            )
    );
END;
$$;
-- END get_locality_with_all_roads
;
-- START get_density_of_locality_by_id
;
CREATE PROCEDURE get_density_of_locality_by_id(IN p_id INT) LANGUAGE plpgsql AS $$ BEGIN
SELECT l1.locality_name,
    (l1.population / l1.area) as density
FROM localities as l1
WHERE l1.locality_id = p_id;
END;
$$;
-- function for get_density_of_locality_by_id
;
CREATE FUNCTION fget_density_of_locality_by_id(p_id int) RETURNS TABLE (
    locality_name varchar(127),
    density float
) LANGUAGE plpgsql AS $$ BEGIN RETURN QUERY CALL get_density_of_locality_by_id(p_id);
END;
$$;
-- END get_density_of_locality_by_id
;
-- START get_total_area
;
CREATE PROCEDURE get_total_area(OUT total_area FLOAT) LANGUAGE plpgsql AS $$ BEGIN
SELECT SUM(area) INTO total_area
FROM localities;
END;
$$;
-- function for get_total_area
;
CREATE FUNCTION fget_total_area() RETURNS FLOAT LANGUAGE plpgsql AS $$
DECLARE total FLOAT;
BEGIN CALL get_total_area(total);
RETURN total;
END;
$$;
-- END get_total_area
-- START get_count_of_localities_with_population_more_than
CREATE PROCEDURE get_count_of_localities_with_population_more_than(INOUT popul INT) LANGUAGE plpgsql AS $$ BEGIN
SELECT COUNT(*) INTO popul
FROM localities
WHERE population > popul;
END;
$$;
--function for get_count_of_localities_with_population_more_than
;
CREATE FUNCTION fget_count_of_localities_with_population_more_than(popul INT) RETURNS INT LANGUAGE plpgsql AS $$ BEGIN CALL get_count_of_localities_with_population_more_than(popul);
RETURN popul;
END;
$$;
-- END get_count_of_localities_with_population_more_than
;
---------------------------------------------------------------
---------------------------------------------------------------
-- fill tables with data
---------------------------------------------------------------
;
INSERT INTO locality_types(locality_type_name)
VALUES ('City'),
    ('Village');
INSERT INTO locality_trip_descriptions(
        description,
        count_of_landmarks,
        count_of_hotels,
        year_of_foundation
    )
VALUES (
        'Omsk is the third largest city in Siberia after Novosibirsk and Krasnoyarsk, and the twelfth-largest city in Russia. It is an important transport node, serving as a train station for the Trans-Siberian Railway and as a staging post for the Irtysh River.',
        17,
        20,
        1716
    ),
    (
        'Novosibirsk is the largest city and administrative centre of Novosibirsk Oblast and the Siberian Federal District in Russia. As of the 2021 Census, it had a population of 1,633,595, making it the most populous city in Siberia and the third-most populous city in Russia after Moscow and Saint Petersburg. The city is located in southwestern Siberia, on the banks of the Ob River.',
        87,
        94,
        1893
    ),
    (
        'Yekaterinburg is a city and the administrative centre of Sverdlovsk Oblast and the Ural Federal District, Russia. The city is located on the Iset River between the Volga-Ural region and Siberia, with a population of roughly 1.5 million residents, up to 2.2 million residents in the urban agglomeration. Yekaterinburg is the fourth-largest city in Russia, the largest city in the Ural Federal District, and one of Russias main cultural and industrial centres. Yekaterinburg has been dubbed the Third capital of Russia, as it is ranked third by the size of its economy, culture, transportation and tourism.',
        801,
        125,
        1723
    );
INSERT INTO localities(
        locality_name,
        population,
        area,
        locality_type_id,
        locality_trip_description_id
    )
VALUES -- id: 1
    ('Omsk', 1181000, 572.5, 1, 1),
    -- id: 2
    ('Sosnovskoe', 3000, 20.7, 2, null),
    -- id: 3
    ('Kokshetau', 161000, 233.6, 1, null),
    -- id: 4
    ('Tyumen', 581000, 698.5, 1, null),
    -- id: 5
    ('Chelyabinsk', 1202000, 530, 1, null),
    -- id: 6
    ('Yekaterinburg', 1495000, 1111, 1, 3),
    -- id: 7
    ('Novosibirsk', 1453000, 502.7, 1, 2),
    -- id: 8
    ('Kemerovo', 531000, 294.8, 1, null),
    -- id: 9
    ('Barnaul', 612000, 320.1, 1, null),
    -- id: 10
    ('Novokuznetsk', 547000, 424.3, 1, null),
    -- id: 11
    ('Tomsk', 524000, 294.6, 1, null),
    -- id: 12
    ('Tavricheskoe', 30000, 67.7, 2, null),
    -- id: 13
    ('Sadovoe', 300, 5.7, 2, null),
    -- id: 14
    ('Lugovoe', 150, 4.7, 2, null),
    -- id: 15
    ('Stepnoe', 360, 10.3, 2, null),
    -- id: 16
    ('Lesnoe', 230, 2.3, 2, null);
INSERT INTO road_types(road_type_name)
VALUES ('Highway');
INSERT INTO roads(
        f_locality_id,
        s_locality_id,
        length,
        road_type_id
    )
VALUES(1, 7, 639, 1),
    (7, 8, 270, 1),
    (2, 1, 1, 1),
    (2, 3, 3, 1),
    (2, 4, 4, 1),
    (2, 5, 5, 1),
    (2, 6, 6, 1),
    (2, 7, 7, 1),
    (2, 8, 8, 1),
    (2, 9, 9, 1),
    (2, 10, 10, 1),
    (2, 11, 11, 1),
    (1, 8, 394, 1),
    (7, 9, 230, 1);
-- !TODO more tables, many-to-many and with n same entities